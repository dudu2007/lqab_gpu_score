#!/usr/bin/env python# -*- coding: UTF-8 -*-  '''{"版权":"LQAB工作室","author":{"1":"集体",}"初创时间:"2017年3月",}'''#--------- 外部模块处理<<开始>> ---------##-----系统自带必备模块引用-----import sys # 操作系统模块1import os # 操作系统模块2import types # 数据类型import time # 时间模块import datetime # 日期模块import hashlib#-----系统外部需安装库模块引用-----#-----DIY自定义库模块引用-----from diy.inc_sys import * #自定义系统级功能模块 from diy.inc_conn import * #自定义数据库功能模块import config #系统配置参数import cgi # CGI模式 取得shell参数用import inc_cnn_bilstm as cb # cnn_bilstm方法库引用import cnn_bilstm_config as config_cbimport diy.inc_nlp as inc_nlp # 自然语言处理模块from datetime import datetime#--------- 外部模块处理<<结束>> ---------##--------- 内部模块处理<<开始>> ---------## ---外部参变量处理# shell模式下参数处理time_start = str(datetime.now().strftime('%Y-%m-%d-%H-%M-%S')) # 启动时间form = cgi.FieldStorage() #处理提交的参数if form.getvalue('a'):    args_list = form["a"].valueelse:    args_list = []dic_args_cmd = args2dic(args_list)model_name = os.path.basename(__file__)skip_shell = "python " + model_name #命令行模式下递归调用命令seed_name = "" #声明种子为全局变量seed_hash = "" #声明种子哈希为全局变量if ("tid" in dic_args_cmd):    tid = int(dic_args_cmd["tid"])else:    tid = 0    if ("action" in dic_args_cmd):    action = dic_args_cmd["action"]else:    action = ""    if ("step_if" in dic_args_cmd):    step_if = int(dic_args_cmd["step_if"])else:    step_if = 0    if ("shell_if" in dic_args_cmd):    shell_if = int(dic_args_cmd["shell_if"])else:    shell_if = 1    if ("sleep" in dic_args_cmd):    sleep = int(dic_args_cmd["sleep"])else:    sleep = 0    if ("after" in dic_args_cmd):    after = dic_args_cmd["after"]else:    after = "00:00:00"    if ("path_in" in dic_args_cmd):    path_in = dic_args_cmd["path_in"]else:    path_in = "./data/input.txt"    if ("path_out" in dic_args_cmd):    path_out = dic_args_cmd["path_out"]else:    path_out = "./data/pretreatment_" + time_start + ".txt"    # ---全局变量处理rs_basedata_mysql = Conn_mysql(config.dic_config["host_mysql"],config.dic_config["user_mysql"],config.dic_config["pwd_mysql"], "lqab_basedata_" + config.dic_config["name_mysql_after"], int(config.dic_config["port_mysql"])) # 生成MYSQL数据库基础数据实例rs_way_mysql = Conn_mysql(config.dic_config["host_mysql"],config.dic_config["user_mysql"],config.dic_config["pwd_mysql"], "lqab_way_" + config.dic_config["name_mysql_after"], int(config.dic_config["port_mysql"])) # 生成MYSQL数据库way方法实例def run_it(*args,**kwargs):    """    主功能模块过程调用区    主要功能为数据清理和变换    """    txt = ""    result_p = ""        if ("code" in dic_args_cmd):        code_p = dic_args_cmd["action"]    else:        code_p = "utf-8"            # 数据库平台生成文章级训练数据    if (action == "train_text_sql"):                if ("table_name" in dic_args_cmd):            table_name_p = dic_args_cmd["table_name"]        else:            table_name_p = "keyword_a_dl"            if ("mark_is" in dic_args_cmd):            mark_is_p = dic_args_cmd["mark_if"]        else:            mark_is_p = "v1"                    if ("file_if" in dic_args_cmd):            file_if_p = dic_args_cmd["file_if"]        else:            file_if_p = "0"                sql = "select keyword,id from " + table_name_p + " where " + mark_is_p + "=0"        res, rows = rs_way_mysql.read_sql(sql)        #print (sql) # 调试用                i = 1        if (res > 0):            for row in rows:                            result_p = ""                sql = "update " + table_name_p + " set " + mark_is_p + "=1 where id=" + str(row[1])                update_if = rs_way_mysql.write_sql(sql) # 打上访问标记                                sql = "select answer from qa where answer like '%" + row[0].strip() + "%' order by rand() limit 1"                res_t, rows_t = rs_basedata_mysql.read_sql(sql)                #print (sql) # 调试用                                if (res_t):                    result_p = rows_t[0][0].split(row[0])[0][:128] +  " [ " + row[0] + " ] " + rows_t[0][0].split(row[0])[1][:128]                try:                    print (i,row[0],result_p) # 调试用                except:                    pass                                if (file_if_p == "1"):                # 逐行写入测试文件                    with open(path_out, "a+",encoding="utf-8") as w:                        try:                            w.write(row[0] + "," + result_p + "\n")                        except:                            pass                                            else:                                    if (result_p.strip() != ""):                        sql = "insert into train_text set keyword='" + row[0].strip() + "',text='" + result_p.replace("'","\"") + "'"                        insert_if = rs_basedata_mysql.write_sql(sql) # 存入分析结果                                    i += 1    # 字向量预处理 加空格    if (action == "words_single_make"):            if ("table_name" in dic_args_cmd):            table_name_p = dic_args_cmd["table_name"]        else:            table_name_p = "classify_train"            if ("mark_is" in dic_args_cmd):            mark_is_p = dic_args_cmd["mark_if"]        else:            mark_is_p = "power"                    if ("file_if" in dic_args_cmd):            file_if_p = dic_args_cmd["file_if"]        else:            file_if_p = "0"                sql = "select content,id from " + table_name_p + " where " + mark_is_p + "=0.0"        res, rows = rs_way_mysql.read_sql(sql)        #print (sql) # 调试用                i = 1        if (res > 0):                    for row in rows:                            result_p = ""                for w in row[0]:                    result_p += w + " "                                # 去掉多余的空格                if (result_p != ""):                    result_p = result_p[:-1]                                    sql = "update " + table_name_p + " set " + mark_is_p + "=1.0,content='" + result_p + "' where id=" + str(row[1])                update_if = rs_way_mysql.write_sql(sql) # 打上访问标记                                try:                    print (i)                except:                    pass                                if (file_if_p == "1"):                # 逐行写入测试文件                    with open(path_out, "a+",encoding="utf-8") as w:                        try:                            w.write(result_p + "\n")                        except:                            pass                                                                i += 1                    # 生成运行数据    if (action == "run_data_make"):                if ("table_name" in dic_args_cmd):            table_name_p = dic_args_cmd["table_name"]        else:            table_name_p = "classify_train"            if ("ratio" in dic_args_cmd):            ratio_p = float(dic_args_cmd["ratio"])        else:            ratio_p = 0.2                    if ("numb" in dic_args_cmd):            numb_p = int(dic_args_cmd["numb"])        else:            numb_p = 0                    count_test = 0        count_train = 0                sql = "select count(*) from " + table_name_p        if (numb_p > 0):            sql += " limit " + str(numb_p)        res, rows = rs_way_mysql.read_sql(sql)        if (res < 1):            return "原始表内容为空或数据库读取错误"        else:            count_test = int(rows[0][0]*ratio_p)            count_train = rows[0][0] - count_test        print (rows[0][0],count_test,count_train) # 调试用        sql = "select md5(content),content ,classify,LENGTH(content) from " + table_name_p + " order by rand()"        if (numb_p > 0):            sql += " limit " + str(numb_p)        res, rows = rs_way_mysql.read_sql(sql)        print (sql)        if (res > 0):                    # 写入测试集            try:                os.remove(config_cb.TEST_CSV_PATH)             except:                pass            with open(config_cb.TEST_CSV_PATH, "a+",encoding="utf-8") as w:                w.write("hash_Id,data,label,len\n")            for i in range(count_test):                try:                    print (i+1,rows[i])                except:                    pass                with open(config_cb.TEST_CSV_PATH, "a+",encoding="utf-8") as w:                    try:                        w.write(rows[i][0] + "," + rows[i][1]+ "," + rows[i][2] + "," + str(rows[i][3]) + "\n")                    except:                        pass                        # 写入训练集            try:                os.remove(config_cb.TRAIN_CSV_PATH)             except:                pass            with open(config_cb.TRAIN_CSV_PATH, "a+",encoding="utf-8") as w:                w.write("hash_Id,data,label,len\n")            for j in range(count_train+1):                try:                    print (i+1,rows[i])                except:                    pass                with open(config_cb.TRAIN_CSV_PATH, "a+",encoding="utf-8") as w:                    try:                        w.write(rows[i][0] + "," + rows[i][1]+ "," + rows[i][2] + "," + str(rows[i][3]) + "\n")                    except:                        pass                i += 1    return txt    #--------- 内部模块处理<<结束>> ---------##---------- 主过程<<开始>> -----------#def main():    #1 过程一        if args_list:        print (run_it())    #2 过程二    #3 过程三        rs_way_mysql.close()    rs_basedata_mysql.close()        #shell 模式下递归调用自己    if (step_if== 1 and args_list):        os.system(skip_shell)if __name__ == '__main__':    main()    #---------- 主过程<<结束>> -----------#