#!/usr/bin/env python# -*- coding: UTF-8 -*-  '''{"版权":"LQAB工作室","author":{"1":"集体",}"初创时间:"2017年3月",}'''#--------- 外部模块处理<<开始>> ---------##-----系统自带必备模块引用-----import sys # 操作系统模块1import os # 操作系统模块2import types # 数据类型import time # 时间模块import datetime # 日期模块import hashlib#-----系统外部需安装库模块引用-----#-----DIY自定义库模块引用-----from diy.inc_sys import * #自定义系统级功能模块 from diy.inc_conn import * #自定义数据库功能模块import config #系统配置参数import cgi # CGI模式 取得shell参数用import inc_cnn_bilstm as cb # cnn_bilstm方法库引用import diy.inc_nlp as inc_nlp # 自然语言处理模块from datetime import datetime#--------- 外部模块处理<<结束>> ---------##--------- 内部模块处理<<开始>> ---------## ---外部参变量处理# shell模式下参数处理time_start = str(datetime.now().strftime('%Y-%m-%d-%H-%M-%S')) # 启动时间form = cgi.FieldStorage() #处理提交的参数if form.getvalue('a'):    args_list = form["a"].valueelse:    args_list = []dic_args_cmd = args2dic(args_list)model_name = os.path.basename(__file__)skip_shell = "python " + model_name #命令行模式下递归调用命令seed_name = "" #声明种子为全局变量seed_hash = "" #声明种子哈希为全局变量if ("tid" in dic_args_cmd):    tid = int(dic_args_cmd["tid"])else:    tid = 0    if ("action" in dic_args_cmd):    action = dic_args_cmd["action"]else:    action = ""    if ("step_if" in dic_args_cmd):    step_if = int(dic_args_cmd["step_if"])else:    step_if = 0    if ("shell_if" in dic_args_cmd):    shell_if = int(dic_args_cmd["shell_if"])else:    shell_if = 1    if ("sleep" in dic_args_cmd):    sleep = int(dic_args_cmd["sleep"])else:    sleep = 0    if ("after" in dic_args_cmd):    after = dic_args_cmd["after"]else:    after = "00:00:00"    if ("path_in" in dic_args_cmd):    path_in = dic_args_cmd["path_in"]else:    path_in = "./data/input.txt"    if ("path_out" in dic_args_cmd):    path_out = dic_args_cmd["path_out"]else:    path_out = "./data/out_" + time_start + ".txt"    # ---全局变量处理rs_basedata_mysql = Conn_mysql(config.dic_config["host_mysql"],config.dic_config["user_mysql"],config.dic_config["pwd_mysql"], "lqab_basedata_" + config.dic_config["name_mysql_after"], int(config.dic_config["port_mysql"])) # 生成MYSQL数据库基础数据实例rs_way_mysql = Conn_mysql(config.dic_config["host_mysql"],config.dic_config["user_mysql"],config.dic_config["pwd_mysql"], "lqab_way_" + config.dic_config["name_mysql_after"], int(config.dic_config["port_mysql"])) # 生成MYSQL数据库way方法实例def run_it(*args,**kwargs):    """    主功能模块过程调用区    主要功能为数据清理和变换    """    txt = ""    result_p = ""    str_t = ""        if ("code" in dic_args_cmd):        code_p = dic_args_cmd["action"]    else:        code_p = "utf-8"            if (action == "check"):        segment = inc_nlp.Segment() #分词类实例化                # 输入数据        with open(path_in, 'r', encoding="utf-8") as f:                    lines = f.readlines()      #读取全部内容 ，并以列表方式返回            i = 1            for line in lines:                            result_p = ""                                try:                    result_p = cb.run_it(str_t=line.replace("\n","").strip(),segment_p=segment)                except:                    pass                                    print (i,line.replace("\n","").strip(),result_p) # 调试用                                # 逐行写入测试文件                with open(path_out, "a+") as w:                    try:                        w.write(line.replace("\n","").strip() + "," + result_p + "\n")                    except:                        pass                i += 1            if (action == "check_sql"):                segment = inc_nlp.Segment() #分词类实例化        if ("table_name" in dic_args_cmd):            table_name_p = dic_args_cmd["table_name"]        else:            table_name_p = "classify_check"            if ("mark_is" in dic_args_cmd):            mark_is_p = dic_args_cmd["mark_if"]        else:            mark_is_p = "v1"                    if ("file_if" in dic_args_cmd):            file_if_p = dic_args_cmd["file_if"]        else:            file_if_p = "0"                sql = "select content,id from " + table_name_p + " where " + mark_is_p + "=0 order by id "        # print (sql) #调试用        res, rows = rs_way_mysql.read_sql(sql)        i = 1        if (res > 0):            for row in rows:                            sql = "update " + table_name_p + " set " + mark_is_p + "=1 where id=" + str(row[1])                update_if = rs_way_mysql.write_sql(sql) # 打上访问标记                            result_p = ""                str_t = " "                try:                    result_p = cb.run_it(str_t=row[0],segment_p=segment)                except:                    pass                                #try:                   if (1):                                        for b in range(len(str(i))):                        str_t += " "                    str_t += "  "                    try:                        print ("\n[" + str(i) + "]",row[0]," - ",result_p," - ") # 调试用                    except:                        pass                    try:                        print (str_t,"\n")                    except:                        pass                                        #except:                    #pass                                if (file_if_p == "1"):                # 逐行写入测试文件                    with open(path_out, "a+",encoding="utf-8") as w:                        try:                            w.write(row[0] + "," + result_p + "\n")                        except:                            pass                                            else:                                    sql = "update " + table_name_p + " set classify='" + result_p + "' where id=" + str(row[1])                    insert_if = rs_way_mysql.write_sql(sql) # 存入分析结果                                    i += 1                    return txt    #--------- 内部模块处理<<结束>> ---------##---------- 主过程<<开始>> -----------#def main():    #1 过程一        if args_list:        print (run_it())    #2 过程二    #3 过程三        rs_way_mysql.close()    rs_basedata_mysql.close()        #shell 模式下递归调用自己    if (step_if== 1 and args_list):        os.system(skip_shell)if __name__ == '__main__':    main()    #---------- 主过程<<结束>> -----------#